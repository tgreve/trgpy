import numpy as np
import csv
from astropy.cosmology import FlatLambdaCDM
from astropy import units as u

from trgpy.config import cosmo_params
from trgpy.dictionary_transitions import freq



# === Routines related to line fluxes and luminosities =======================
#
#
def line_lum(z, sdv, transition, units='prime'):
    """ PURPOSE:
            Return line luminosity for a given redshift, transition, and line
            flux.

        INPUT:
            z               :   source redshift
            sdv             :   line flux [Jy km/s]
            transition      :   line transition
            lum_line_unit   :   'prime': [lum_line] = K km/s pc^2 or
                                'solar': = [lum_line] = Lsolar
        OUTPUT:
                            :   line luminosity ([K km/s pc^2] or [Lsolar])

        STATUS:
            02.02.2015: started
            28.10.18: python 3.6.5 compatible.
            29.10.18: can take single value, array, or list as input.
    """

    # If input not a list or an array
    if np.shape(z) == ():
        z = [z]
        sdv = [sdv]
        transition = [transition]

    z = np.array(z)
    sdv = np.array(sdv)
    transition = np.array(transition)

    # Get luminosity distance, [Mpc]
    cosmo = FlatLambdaCDM(H0=100.*cosmo_params['h'],
            Om0=cosmo_params['omega_M_0'], Tcmb0=cosmo_params['Tcmb0'])
    d_L = cosmo.luminosity_distance(z)
    d_L = d_L.value

    # Get observed frequency, [GHz]
    while True:
        try:
            frq_o = []
            for i in np.arange(0,len(z)):
                frq_o.append((np.array(freq[transition[i]]) / (1. + z[i])))
            break
        except ValueError:
            print("Not a valid transition! Please try again.")

    # Calculate line luminosity
    frq_o = np.array(frq_o)
    if units == 'solar':
        return (1.04E-3 * sdv * frq_o * d_L * d_L)
    else:
        return (3.25E7 * sdv * (1. / (frq_o * frq_o)) * d_L * d_L
                / ((1.0 + z)**3.))


#
#
#def lum_line_conversion(transition, line_luminosity, conversion='lprime2lsun'):
#    """ PURPOSE:
#       Convert line luminosities from Lprime [K km/s pc^2] to Lsolar [Lsun] or
#       vice versa.
#
#       The default conversion is Lprime to Lsun. Transition has to be a string.
#       Input line_luminosity can be of any type (float, array, type) but is
#       outputted as array. Undefined line_luminosities and upper limits (i.e.,
#       -999 and 99) are passed on in
#       the output.
#
#       Status: working
#    """
#
#    # Get rest-frame frequency for transition
#    line_frq_rest = [freq[transition]]
#
#    # Convert to list if float
#    if isinstance(line_luminosity, float) or isinstance(line_luminosity, int):
#        line_luminosity = [line_luminosity]
#
#    # Remember upper limits and undefined values
#    indices_undefined = [i for i, item in enumerate(
#        line_luminosity) if item == -999]
#    indices_upper_limits = [i for i, item in enumerate(
#        line_luminosity) if item == 99]
#
#    line_frq_rest = np.array(line_frq_rest)
#    line_luminosity = np.array(line_luminosity)
#
#    # Make conversion
#    if conversion == 'lsun2lprime':
#        line_luminosity = ((line_luminosity * 1.E9) / 3.18E4) * \
#            (100. / (line_frq_rest))**3.
#        if indices_undefined != []:
#            for j in indices_undefined:
#                line_luminosity[j] = -999
#        if indices_upper_limits != []:
#            for j in indices_upper_limits:
#                line_luminosity[j] = 99
#    else:
#        line_luminosity = 3.18E4 * \
#            ((line_frq_rest / 100.)**3.) * (line_luminosity / 1.E9)
#        if indices_undefined != []:
#            for j in indices_undefined:
#                line_luminosity[j] = -999
#        if indices_upper_limits != []:
#            for j in indices_upper_limits:
#                line_luminosity[j] = 99
#
#    return line_luminosity


#
#
def line_flux(z, transition, line_lum, line_lum_unit='prime'):
    """ PURPOSE:
            Returns the velocity-integrated line flux for a given source
            redshift, rest-frame line frequency, and line luminosity.

        INPUT:
            z               :   source redshift
            transition      :   line transition
            line_lum        :   line luminosity
            line_lum_unit   :   'prime': [lum_line] = K km/s pc^2 or
                                'solar': = [lum_line] = Lsolar
        OUTPUT:
                            :   line flux [Jy km/s]

        STATUS:
            01.02.15: started
            10.02.17: minor update
            07.11.18: python 3.6.6 compatible. Can take single values or lists.
    """

    # If input not a list or an array
    if np.shape(z) == ():
        z = [z]
        line_lum = [line_lum]
        transition = [transition]

    z = np.array(z)
    line_lum = np.array(line_lum)
    transition = np.array(transition)

    # Get luminosity distance, [Mpc]
    cosmo = FlatLambdaCDM(H0=100.*cosmo_params['h'],
            Om0=cosmo_params['omega_M_0'], Tcmb0=cosmo_params['Tcmb0'])
    d_L = cosmo.luminosity_distance(z)
    d_L = d_L.value

    # Get observed frequency, [GHz]
    while True:
        try:
            frq_o = []
            for i in np.arange(0,len(z)):
                frq_o.append((np.array(freq[transition[i]]) / (1. + z[i])))
            break
        except ValueError:
            print("Not a valid transition! Please try again.")

    # Calculate line flux
    frq_o = np.array(frq_o)
    if line_lum_unit == 'solar':
        return (((line_lum / 1.04E-3) * (1. + z)) / (d_L * d_L)) / frq_r
    else:
        return (line_lum / 3.25E7) * (frq_o**2) * ((1.0 + z)**3) / (d_L**2)


#
#
def line_flux_conversion(frq, sdv, conversion='jansky2si'):
    """ PURPOSE:
            Converts line fluxes given in units of Jy km/s to
            units of W m^-2, or vice versa. This is particularly
            useful when dealing with FIR fine-structure lines, where
            integrated line fluxes are often times given in units of W m^-2.

        INPUT:
            frq:            :   approximate line center frequency [GHz].
            sdv             :   line flux [Jy km/s] or [W m^-2].

        OUTPUT:
                            :   integrated line flux [Jy km/s] or [W m^-2].

        STATUS:
            02.02.15: started
            10.02.17: updated
            07.11.18: python 3.6.6 compatible. Can take single values or lists.
    """

    # If input not a list or an array
    if np.shape(sdv) == ():
        sdv = [sdv]
        frq = [frq]
        single_value = True

    sdv = np.array(sdv)
    frq = np.array(frq)

    if conversion == 'si2jansky':
        # [Jy km/s]
        result = (sdv / 1.E-26) * 3.E5 * (1. / (frq * 1.E9))
    else:
        # [W m^-2]
        result = sdv * (1.E-26) * (frq * 1.E9) * (1. / 3.E5)

    if single_value:
        result = result[0]

    return result




# === Routines related to emg data base ======================================
#
#
def extract_emg_csv(object_id='all', object_type='all', transition='all',
                    flag_include=False, verbose=False):
    """ PURPOSE:
            Extract data entries from emg.csv file according to the object_id,
            object_type and transition criteria. If flag_include=True, only
            objects that have include=1 in the csv file are extracted.

        INPUT:
                object_id   :   specific object id to extract.
                                Default 'all'.
                object_type :   specific object type to extract.
                                Default 'all'
                transition  :   transition to extract.
                                Default 'all'

        STATUS:
            07.11.18: python 3.6.5 compatible.
    """

    # Initialize data.
    data = np.zeros((1000,), dtype=[('ID', list), ('type', list),
                                    ('transition', list), ('z', float),
                                    ('ez', float), ('FWHM', float),
                                    ('eFWHM', float), ('SdV', float),
                                    ('eSdV', float), ('L_transition', float),
                                    ('eL_transition', float),
                                    ('magnification', float),
                                    ('include', list), ('reference', list),
                                    ('lir_8_1000_literature', float),
                                    ('elir_8_1000_literature', float),
                                    ('lir_8_1000_cigale', float),
                                    ('elir_8_1000_cigale', float),
                                    ('lir_40_120_cigale', float),
                                    ('elir_40_120_cigale', float)])

    # Open csv file.
    i = 0
    cr = csv.reader(open("/Users/tgreve/Dropbox/Work/local/python/trgpy/src/EMGs-v1.1.csv"))
    for row in cr:
        if row[2] == '0' or row[2] == '1':
            data['ID'][i] = row[0].strip()
            data['include'][i] = row[2].strip()
            data['type'][i] = row[4].strip()
            data['transition'][i] = row[5].strip()
            data['z'][i] = row[8]
            data['ez'][i] = row[9]
            if row[8] == '-999':
                data['z'][i] = row[6]
                data['ez'][i] = row[7]
            if row[6] == '-999':
                data['z'][i] = row[8]
                data['ez'][i] = row[9]
            data['FWHM'][i] = row[10]
            data['eFWHM'][i] = row[11]
            data['SdV'][i] = row[12]
            data['eSdV'][i] = row[13]
            data['magnification'][i] = row[14]
            data['reference'][i] = row[16]
            if row[18] != '':
                data['lir_8_1000_literature'][i] = float(row[18])
            if row[19] != '':
                data['elir_8_1000_literature'][i] = float(row[19])
            if row[22] != '':
                data['lir_8_1000_cigale'][i] = float(row[22])
                data['elir_8_1000_cigale'][i] = 0.2*float(row[22])
            if row[23] != '':
                data['lir_40_120_cigale'][i] = float(row[23])
                data['elir_40_120_cigale'][i] = 0.2*float(row[23])
            i = i + 1
    data = data[0:i]

    # Extract according to input criteria.
    if object_id != 'all':
        data = data[data['ID'] == object_id]
    if object_type != 'all':
        data = data[data['type'] == object_type]
    if transition != 'all':
        data = data[data['transition'] == transition]
    if flag_include:
        data = data[data['include'] == '1']

    # Remove empty ID strings
    data = data[data['ID'] != '']

    if verbose:
        list_emg(data)

    return data

#
#
def list_emg(data):
    """ List the formatted content of data to terminal.

       STARTED: ?
       UPDATED: 10.02.17
    """

    # Format header.
    print(' ')
    print('%s %35s %7s %9s %9s %8s %8s %9s %11s %11s %17s' % ('ID', 'Type',
          'z', 'line', 'u', 'FWHM', 'eFWHM', 'SdV', 'eSdV', 'L', 'eL'))
    print('%s %35s %7s %7s %7s %13s %7s %12s %11s %14s %16s' % ('  ', '  ',
          ' ', '    ', ' ', '[km/s]', '[km/s]', '[Jy km/s]', '[Jy km/s]',
          '[K km/s pc^2', '[K km/s pc^2]'))
    j = 0
    for i in data:
        # Format entries with upper flux limits.
        if data['eSdV'][j] == 99:
            print('%s %s %8.4f %10s %7s %7i %7i %11.3f %11i %14.2e %15.2e'
                  % (data['ID'][j].ljust(33), data['type'][j].ljust(5),
                     data['z'][j], data['transition'][
                         j], data['magnification'][j],
                     data['FWHM'][j], data['eFWHM'][
                         j], data['SdV'][j], data['eSdV'][j],
                     data['L_transition'][j], data['eL_transition'][j]))
        # Format normal entries.
        else:
            print('%s %s %8.4f %10s %7s %7i %7i %11.3f %11.3f %14.2e %15.2e'
                  % (data['ID'][j].ljust(33), data['type'][j].ljust(5),
                     data['z'][j], data['transition'][
                         j], data['magnification'][j],
                     data['FWHM'][j], data['eFWHM'][
                         j], data['SdV'][j], data['eSdV'][j],
                     data['L_transition'][j], data['eL_transition'][j]))
        j = j + 1

#
#
def make_unique_emg_fluxes(data, transition):
    """
       Creates a unique list of emg entries

       Fix multiple occurrences of certain sources by replacing
       with (weighted) averages (for flux, line fwhm, redhift, etc).
       Fix instances of z=-999, u=-999 etc
    """

    # Set undefined magnification factors (u=-999) unity.
    indices = [i for i, item in enumerate(
               data['magnification']) if item == -999]
    if indices != []:
        for j in indices:
            data['magnification'][j] = 1.0

    # Extract unique list of transitions.
    trans = list(set(data['transition']))
    ids = list(set(data['ID']))

    for var in trans:
        for var1 in ids:
            indices = [i for i, item in enumerate(
                       data['ID']) if item == var1]

            x = data['SdV'][indices]
            ex = data['eSdV'][indices]
            x_wa = np.average(x, weights = 1./ex**2)
            ex_wa = np.sqrt(1./sum(1./ex**2))
            data['SdV'][indices[0]] = x_wa
            data['eSdV'][indices[0]] = ex_wa
            data['ID'][indices[1:]] = ['REMOVE']*(len(indices) - 1)

            x = data['FWHM'][indices]
            ex = data['eFWHM'][indices]
            x_wa = np.average(x, weights = 1./ex**2)
            ex_wa = np.sqrt(1. / sum(1. / ex**2))
            data['FWHM'][indices[0]] = x_wa
            data['eFWHM'][indices[0]] = ex_wa

            x = data['z'][indices]
            ex = data['ez'][indices]
            x_wa = np.average(x, weights = 1./ex**2)
            ex_wa = np.sqrt(1./sum(1./ex**2))
            data['z'][indices[0]] = x_wa
            data['ez'][indices[0]] = ex_wa

    data = data[data['ID'] != 'REMOVE']

    return data


#
#
def delense_fluxes(data):
    """De-lenses fluxes and preserves undefined and/or upper limits"""

    # where eSdV is undefined, then L_transition is undefined
    indices_undefined = [i for i, item in enumerate(
        data['eSdV']) if item == -999]

    # where SdV is upper limit, then L_transition is upper limit
    indices_upper_limit = [
        i for i, item in enumerate(data['eSdV']) if item == 99]

    data['SdV'] = data['SdV'] / data['magnification']
    data['eSdV'] = data['eSdV'] / data['magnification']

    if indices_undefined != []:
        data['eSdV'][indices_undefined] = -999
    if indices_upper_limit != []:
        data['eSdV'][indices_upper_limit] = 99

    return data


#
#
def intersection_emg(data_1, data_2):
    """
       Extracts the intersection between data_1 and data_2 and returns
       the trimmed and appropriately ordered data_1 and data_2 structures
       containing the intersection entries.

    """

    ids_1 = list(data_1['ID'])
    ids_2 = list(data_2['ID'])
    intersection_indices = [i for i, item in enumerate(ids_1) if item in ids_2]
    data_1 = data_1[intersection_indices]

    ids_1 = list(data_1['ID'])
    ids_2 = list(data_2['ID'])
    intersection_indices = [i for i, item in enumerate(ids_2) if item in ids_1]
    data_2 = data_2[intersection_indices]

    return data_1, data_2
